// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //  15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0    
    //  i   x   x   a   c1  c2  c3  c4  c5  c6  d1  d2  d3  j1  j2  j3
    //  isC         isM                         A   D   M   lt  eq  gt

    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=toA);

    Mux(a=true,b=instruction[5],sel=instruction[15],out=Aload);
    ARegister(in=toA,load=Aload, //A
        out=inA,
        out[0..14]=addressM,
        out=PCin);

    Mux(/*a=,*/b=instruction[4],sel=instruction[15],out=Dload);
    DRegister(in=ALUout,load=Dload,out=Dout);

    //ALU control
    Mux(/*a=,*/b=instruction[11],sel=instruction[15],out=toZX);
    Mux(/*a=,*/b=instruction[10],sel=instruction[15],out=toNX);
    Mux(/*a=,*/b=instruction[9],sel=instruction[15],out=toZY);
    Mux(/*a=,*/b=instruction[8],sel=instruction[15],out=toNY);
    Mux(/*a=,*/b=instruction[7],sel=instruction[15],out=toF);
    Mux(/*a=,*/b=instruction[6],sel=instruction[15],out=toNO);
    // the value of y of the input of ALU
    Mux(/*a=,*/b=instruction[12],sel=instruction[15],out=useAorM);
    Mux16(a=inA,b=inM,sel=useAorM,out=AM);
    // ALU
    ALU(x=Dout,y=AM,
        zx=toZX,
        nx=toNX,
        zy=toZY,
        ny=toNY,
        f=toF,
        no=toNO,
        out=outM,
        out=ALUout,
        zr=ZR,
        ng=NG
    );
    
    // JMP condition
    And(a=instruction[2],b=NG,out=lJmp);
    And(a=instruction[1],b=ZR,out=eJmp);
    Or(a=NG,b=ZR,out=EqLt);
    Not(in=EqLt,out=POS);
    And(a=instruction[0],b=POS,out=gJmp);

    Or(a=lJmp,b=eJmp,out=t);
    Or(a=gJmp,b=t,out=wannaJMP);
    //PC
    Mux(/*a=,*/b=wannaJMP,sel=instruction[15],out=pcLoad);
    PC(in=PCin,load=pcLoad,inc=true,reset=reset,out[0..14]=pc);

    //writeM
    Mux(/*a=,*/b=instruction[3],sel=instruction[15],out=writeM);
}